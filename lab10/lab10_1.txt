Ian Park
CS344 Lab10
2020/04/18

Exercise 10.1
  a. Would you rather use TensorFlow or Keras to build your models?

    - I would rather use Keras to build my models because of the high-level abstractions and convenience it provides over Tensorflow. Since it's built on top of Tensorflow, we benefit from not manually writing boilerplate code. However, I guess we would be losing some flexibility of manually tweaking things only accessible from directly using Tensorflow. But for simple prototype models, Keras would be superior.

  b. Tasks 1 & 2: Report your best hyper-parameter settings and their resulting performance on the testing dataset. 

  Task 1:
    dnn_regressor = train_nn_regression_model(
        learning_rate=0.05,
        steps=1000,
        batch_size=20,
        hidden_units=[10, 10],
        training_examples=training_examples,
        training_targets=training_targets,
        validation_examples=validation_examples,
        validation_targets=validation_targets)
    
    Result Training RMSE: 167.10
	Result Validation RMSE: 167.81
  
  Task 2:
    california_housing_test_data = pd.read_csv("https://download.mlcc.google.com/mledu-datasets/california_housing_test.csv", sep=",")
    
    test_examples = preprocess_features(california_housing_test_data)
    test_targets = preprocess_targets(california_housing_test_data)
    
    predict_testing_input_fn = lambda: my_input_fn(test_examples, 
                                                   test_targets["median_house_value"], 
                                                   num_epochs=1, 
                                                   shuffle=False)
    
    test_predictions = dnn_regressor.predict(input_fn=predict_testing_input_fn)
    test_predictions = np.array([item['predictions'][0] for item in test_predictions])
    
    root_mean_squared_error = math.sqrt(
        metrics.mean_squared_error(test_predictions, test_targets))
    
    print("Final RMSE (on test data): %0.2f" % root_mean_squared_error)

    Result Test RMSE: 164.88

      
